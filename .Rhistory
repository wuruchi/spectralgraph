ggtitle("Model 2 checking") +
labs(x = '# vertex', y = "degree" , color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))
zeta_dist <- as.data.frame(rzeta(10000, 1.32))
colnames(zeta_dist) <- c("V2")
degree_sequencez <- zeta_dist %>% count('V2')
ggplot() +
geom_point(aes(log(degree_sequence3$V2), log(degree_sequence3$freq) , color = "data")) +
geom_line(aes(log(degree_sequencez$V2), log(degree_sequencez$freq), color = "model")) +
ggtitle("Model 1 checking") +
labs(x = '# vertex', y = "degree" , color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))
#zeta_dist$ID <- seq.int(nrow(zeta_dist))
#colnames(zeta_dist) = c("degree", "vertex")
# Use degree_sequence1, degree_sequence2, degree_sequence3 here
x = degree_sequence1$freq
M <- sum(x)
Mp <- sum(log(x))
N <- nrow(degree_sequence1)
K <- max(x)
C <- 0
for (i in 1:N) {
k_i <- x[i]
if( k_i >= 2 ){
for (j in 2:k_i) {
C <- C + log(j)
}
}
}
H <- function(a, b) {
sum(sapply(1:a, function(x) x^-b))
}
#model 1
minus_log_likelihood_displaced_poisson <- function(lambda) {
-M*log(lambda) + N*(lambda + log(1 - exp(-lambda))) + C
}
#model 2
minus_log_likelihood_displaced_geometric <- function(q) {
-(M-N) * log(1-q) - N*log(q)
}
#model 3
minus_log_likelihood_zeta <- function(gamma) {
length(x) * log(zeta(gamma)) + gamma * sum(log(x))
}
#model 4
minus_log_likelihood_right_truncated_zeta <- function(gamma, k_max) {
gamma*M + N*log(H(k_max, gamma))
}
#mle model 1
mle_displaced_poisson <- mle(minus_log_likelihood_displaced_poisson,
start = list(lambda = M/N),
method = "L-BFGS-B",
lower = c(1.0000001))
#mle model 2
mle_displaced_geometric <- mle(minus_log_likelihood_displaced_geometric,
start = list(q = N/M),
method = "L-BFGS-B",
lower = c(0.0000001),
upper = c(0.9999999))
#mle model 3
mle_zeta <- mle(minus_log_likelihood_zeta,
start = list(gamma = 3),
method = "L-BFGS-B",
lower = c(1.0000001))
#mle model 4
mle_right_truncated_zeta <- mle(minus_log_likelihood_right_truncated_zeta,
start = list(gamma = 3, k_max = N ),
method = "L-BFGS-B",
lower = c(1.0000001, N))
# Model selection with R
#attributes(summary(mle_zeta))$m2logL
get_m2logL <- function(mle) {
attributes(summary(mle))$m2logL
}
get_coef <- function(mle) {
attributes(summary(mle))$coef[1]
}
get_AIC <- function(m2logL,K,N) {
m2logL + 2*K*N/(N-K-1) # AIC with a correction for sample size
}
get_all_data <- function(mle) {
n_params <- length(attributes(mle)$coef)
m2logL <- get_m2logL(mle)
c(coef=get_coef(mle), AIC=get_AIC(m2logL, n_params, N))
}
# cat("Displaced Poisson\n")
# get_all_data(mle_displaced_poisson)
# cat("Displaced Geometric\n")
# get_all_data(mle_displaced_geometric)
# cat("Zeta\n")
# get_all_data(mle_zeta)
# cat("Right Truncated Zeta\n")
# get_all_data(mle_right_truncated_zeta)
result <- data.frame(dp=get_all_data(mle_displaced_poisson)['AIC'], dg=get_all_data(mle_displaced_geometric)['AIC'], z=get_all_data(mle_zeta)['AIC'], rtz=get_all_data(mle_right_truncated_zeta)['AIC'])
colnames(result) = c("Displaced Poisson", "Displaced Geometric", "Zeta", "Right Truncated Zeta")
result
# Use degree_sequence1, degree_sequence2, degree_sequence3 here
x = degree_sequence1$freq
M <- sum(x)
Mp <- sum(log(x))
N <- nrow(degree_sequence1)
K <- max(x)
C <- 0
for (i in 1:N) {
k_i <- x[i]
if( k_i >= 2 ){
for (j in 2:k_i) {
C <- C + log(j)
}
}
}
H <- function(a, b) {
sum(sapply(1:a, function(x) x^-b))
}
#model 1
minus_log_likelihood_displaced_poisson <- function(lambda) {
-M*log(lambda) + N*(lambda + log(1 - exp(-lambda))) + C
}
#model 2
minus_log_likelihood_displaced_geometric <- function(q) {
-(M-N) * log(1-q) - N*log(q)
}
#model 3
minus_log_likelihood_zeta <- function(gamma) {
length(x) * log(zeta(gamma)) + gamma * sum(log(x))
}
#model 4
minus_log_likelihood_right_truncated_zeta <- function(gamma, k_max) {
gamma*M + N*log(H(k_max, gamma))
}
#mle model 1
mle_displaced_poisson <- mle(minus_log_likelihood_displaced_poisson,
start = list(lambda = M/N),
method = "L-BFGS-B",
lower = c(1.0000001))
#mle model 2
# mle_displaced_geometric <- mle(minus_log_likelihood_displaced_geometric,
#                                start = list(q = N/M),
#                                method = "L-BFGS-B",
#                                lower = c(0.0000001),
#                                upper = c(0.9999999))
#mle model 3
mle_zeta <- mle(minus_log_likelihood_zeta,
start = list(gamma = 3),
method = "L-BFGS-B",
lower = c(1.0000001))
#mle model 4
mle_right_truncated_zeta <- mle(minus_log_likelihood_right_truncated_zeta,
start = list(gamma = 3, k_max = N ),
method = "L-BFGS-B",
lower = c(1.0000001, N))
# Model selection with R
#attributes(summary(mle_zeta))$m2logL
get_m2logL <- function(mle) {
attributes(summary(mle))$m2logL
}
get_coef <- function(mle) {
attributes(summary(mle))$coef[1]
}
get_AIC <- function(m2logL,K,N) {
m2logL + 2*K*N/(N-K-1) # AIC with a correction for sample size
}
get_all_data <- function(mle) {
n_params <- length(attributes(mle)$coef)
m2logL <- get_m2logL(mle)
c(coef=get_coef(mle), AIC=get_AIC(m2logL, n_params, N))
}
# cat("Displaced Poisson\n")
# get_all_data(mle_displaced_poisson)
# cat("Displaced Geometric\n")
# get_all_data(mle_displaced_geometric)
# cat("Zeta\n")
# get_all_data(mle_zeta)
# cat("Right Truncated Zeta\n")
# get_all_data(mle_right_truncated_zeta)
result <- data.frame(dp=get_all_data(mle_displaced_poisson)['AIC'], dg=get_all_data(mle_displaced_geometric)['AIC'], z=get_all_data(mle_zeta)['AIC'], rtz=get_all_data(mle_right_truncated_zeta)['AIC'])
colnames(result) = c("Displaced Poisson", "Displaced Geometric", "Zeta", "Right Truncated Zeta")
result
# Use degree_sequence1, degree_sequence2, degree_sequence3 here
x = degree_sequence2$freq
M <- sum(x)
Mp <- sum(log(x))
N <- nrow(degree_sequence2)
K <- max(x)
C <- 0
for (i in 1:N) {
k_i <- x[i]
if( k_i >= 2 ){
for (j in 2:k_i) {
C <- C + log(j)
}
}
}
H <- function(a, b) {
sum(sapply(1:a, function(x) x^-b))
}
#model 1
minus_log_likelihood_displaced_poisson <- function(lambda) {
-M*log(lambda) + N*(lambda + log(1 - exp(-lambda))) + C
}
#model 2
minus_log_likelihood_displaced_geometric <- function(q) {
-(M-N) * log(1-q) - N*log(q)
}
#model 3
minus_log_likelihood_zeta <- function(gamma) {
length(x) * log(zeta(gamma)) + gamma * sum(log(x))
}
#model 4
minus_log_likelihood_right_truncated_zeta <- function(gamma, k_max) {
gamma*M + N*log(H(k_max, gamma))
}
#mle model 1
mle_displaced_poisson <- mle(minus_log_likelihood_displaced_poisson,
start = list(lambda = M/N),
method = "L-BFGS-B",
lower = c(1.0000001))
#mle model 2
# mle_displaced_geometric <- mle(minus_log_likelihood_displaced_geometric,
#                                start = list(q = N/M),
#                                method = "L-BFGS-B",
#                                lower = c(0.0000001),
#                                upper = c(0.9999999))
#mle model 3
mle_zeta <- mle(minus_log_likelihood_zeta,
start = list(gamma = 3),
method = "L-BFGS-B",
lower = c(1.0000001))
#mle model 4
mle_right_truncated_zeta <- mle(minus_log_likelihood_right_truncated_zeta,
start = list(gamma = 3, k_max = N ),
method = "L-BFGS-B",
lower = c(1.0000001, N))
# Model selection with R
#attributes(summary(mle_zeta))$m2logL
get_m2logL <- function(mle) {
attributes(summary(mle))$m2logL
}
get_coef <- function(mle) {
attributes(summary(mle))$coef[1]
}
get_AIC <- function(m2logL,K,N) {
m2logL + 2*K*N/(N-K-1) # AIC with a correction for sample size
}
get_all_data <- function(mle) {
n_params <- length(attributes(mle)$coef)
m2logL <- get_m2logL(mle)
c(coef=get_coef(mle), AIC=get_AIC(m2logL, n_params, N))
}
# cat("Displaced Poisson\n")
# get_all_data(mle_displaced_poisson)
# cat("Displaced Geometric\n")
# get_all_data(mle_displaced_geometric)
# cat("Zeta\n")
# get_all_data(mle_zeta)
# cat("Right Truncated Zeta\n")
# get_all_data(mle_right_truncated_zeta)
result <- data.frame(dp=get_all_data(mle_displaced_poisson)['AIC'], dg=get_all_data(mle_displaced_geometric)['AIC'], z=get_all_data(mle_zeta)['AIC'], rtz=get_all_data(mle_right_truncated_zeta)['AIC'])
colnames(result) = c("Displaced Poisson", "Displaced Geometric", "Zeta", "Right Truncated Zeta")
result
# Use degree_sequence1, degree_sequence2, degree_sequence3 here
x = degree_sequence3$freq
M <- sum(x)
Mp <- sum(log(x))
N <- nrow(degree_sequence3)
K <- max(x)
C <- 0
for (i in 1:N) {
k_i <- x[i]
if( k_i >= 2 ){
for (j in 2:k_i) {
C <- C + log(j)
}
}
}
H <- function(a, b) {
sum(sapply(1:a, function(x) x^-b))
}
#model 1
minus_log_likelihood_displaced_poisson <- function(lambda) {
-M*log(lambda) + N*(lambda + log(1 - exp(-lambda))) + C
}
#model 2
minus_log_likelihood_displaced_geometric <- function(q) {
-(M-N) * log(1-q) - N*log(q)
}
#model 3
minus_log_likelihood_zeta <- function(gamma) {
length(x) * log(zeta(gamma)) + gamma * sum(log(x))
}
#model 4
minus_log_likelihood_right_truncated_zeta <- function(gamma, k_max) {
gamma*M + N*log(H(k_max, gamma))
}
#mle model 1
mle_displaced_poisson <- mle(minus_log_likelihood_displaced_poisson,
start = list(lambda = M/N),
method = "L-BFGS-B",
lower = c(1.0000001))
#mle model 2
# mle_displaced_geometric <- mle(minus_log_likelihood_displaced_geometric,
#                                start = list(q = N/M),
#                                method = "L-BFGS-B",
#                                lower = c(0.0000001),
#                                upper = c(0.9999999))
#mle model 3
mle_zeta <- mle(minus_log_likelihood_zeta,
start = list(gamma = 3),
method = "L-BFGS-B",
lower = c(1.0000001))
#mle model 4
mle_right_truncated_zeta <- mle(minus_log_likelihood_right_truncated_zeta,
start = list(gamma = 3, k_max = N ),
method = "L-BFGS-B",
lower = c(1.0000001, N))
# Model selection with R
#attributes(summary(mle_zeta))$m2logL
get_m2logL <- function(mle) {
attributes(summary(mle))$m2logL
}
get_coef <- function(mle) {
attributes(summary(mle))$coef[1]
}
get_AIC <- function(m2logL,K,N) {
m2logL + 2*K*N/(N-K-1) # AIC with a correction for sample size
}
get_all_data <- function(mle) {
n_params <- length(attributes(mle)$coef)
m2logL <- get_m2logL(mle)
c(coef=get_coef(mle), AIC=get_AIC(m2logL, n_params, N))
}
# cat("Displaced Poisson\n")
# get_all_data(mle_displaced_poisson)
# cat("Displaced Geometric\n")
# get_all_data(mle_displaced_geometric)
# cat("Zeta\n")
# get_all_data(mle_zeta)
# cat("Right Truncated Zeta\n")
# get_all_data(mle_right_truncated_zeta)
result <- data.frame(dp=get_all_data(mle_displaced_poisson)['AIC'], dg=get_all_data(mle_displaced_geometric)['AIC'], z=get_all_data(mle_zeta)['AIC'], rtz=get_all_data(mle_right_truncated_zeta)['AIC'])
colnames(result) = c("Displaced Poisson", "Displaced Geometric", "Zeta", "Right Truncated Zeta")
result
# degree_sequence1, degree_sequence2, degree_sequence3
x = degree_sequence1$freq
zeta_dist <- as.data.frame(rzeta(10000, 1.34))
colnames(zeta_dist) <- c("V2")
degree_sequencez <- zeta_dist %>% count('V2')
ggplot() +
geom_point(aes(log(degree_sequence1$V2), log(degree_sequence1$freq) , color = "data")) +
geom_line(aes(log(degree_sequencez$V2), log(degree_sequencez$freq), color = "fit")) +
ggtitle("Model 1 checking") +
labs(x = '# vertex', y = "degree" , color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))
zeta_dist <- as.data.frame(rzeta(10000, 1.18))
colnames(zeta_dist) <- c("V2")
degree_sequencez <- zeta_dist %>% count('V2')
ggplot() +
geom_point(aes(log(degree_sequence2$V2), log(degree_sequence2$freq) , color = "data")) +
geom_line(aes(log(degree_sequencez$V2), log(degree_sequencez$freq), color = "fit")) +
ggtitle("Model 2 checking") +
labs(x = '# vertex', y = "degree" , color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))
zeta_dist <- as.data.frame(rzeta(10000, 1.32))
colnames(zeta_dist) <- c("V2")
degree_sequencez <- zeta_dist %>% count('V2')
ggplot() +
geom_point(aes(log(degree_sequence3$V2), log(degree_sequence3$freq) , color = "data")) +
geom_line(aes(log(degree_sequencez$V2), log(degree_sequencez$freq), color = "fit")) +
ggtitle("Model 1 checking") +
labs(x = '# vertex', y = "degree" , color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))
#zeta_dist$ID <- seq.int(nrow(zeta_dist))
#colnames(zeta_dist) = c("degree", "vertex")
# degree_sequence1, degree_sequence2, degree_sequence3
x = degree_sequence1$freq
zeta_dist <- as.data.frame(rzeta(10000, 1.34))
colnames(zeta_dist) <- c("V2")
degree_sequencez <- zeta_dist %>% count('V2')
ggplot() +
geom_point(aes(log(degree_sequence1$V2), log(degree_sequence1$freq) , color = "data")) +
geom_line(aes(log(degree_sequencez$V2), log(degree_sequencez$freq), color = "fit")) +
ggtitle("First BA checking") +
labs(x = '# vertex', y = "degree" , color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))
zeta_dist <- as.data.frame(rzeta(10000, 1.18))
colnames(zeta_dist) <- c("V2")
degree_sequencez <- zeta_dist %>% count('V2')
ggplot() +
geom_point(aes(log(degree_sequence2$V2), log(degree_sequence2$freq) , color = "data")) +
geom_line(aes(log(degree_sequencez$V2), log(degree_sequencez$freq), color = "fit")) +
ggtitle("Second BA 2 checking") +
labs(x = '# vertex', y = "degree" , color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))
zeta_dist <- as.data.frame(rzeta(10000, 1.32))
colnames(zeta_dist) <- c("V2")
degree_sequencez <- zeta_dist %>% count('V2')
ggplot() +
geom_point(aes(log(degree_sequence3$V2), log(degree_sequence3$freq) , color = "data")) +
geom_line(aes(log(degree_sequencez$V2), log(degree_sequencez$freq), color = "fit")) +
ggtitle("Third BA checking") +
labs(x = '# vertex', y = "degree" , color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))
#zeta_dist$ID <- seq.int(nrow(zeta_dist))
#colnames(zeta_dist) = c("degree", "vertex")
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(ggplot2)
setwd('/Users/BleuDChan/ReposUPC/spectralgraph')
model1 = read.table("data/graph_a1yw.txt", header = FALSE, as.is = c("V1","V2","W"))
model1 = read.table("/data/graph_a1yw.txt", header = FALSE, as.is = c("V1","V2","W"))
model1 = read.table("/data/graph_a1yw.txt", header = FALSE, as.is = c("V1","V2","W"))
model1 = read.table("/data/graph_a1yw.txt", header = FALSE, as.is = c("V1","V2","W"))
model1 = read.table("/data/graph_a1yw.txt", header = FALSE, as.is = c("V1","V2","W"))
model1 = read.table("/data/graph_a1yw.txt", header = FALSE, as.is = c("V1","V2","W"))
model1 = read.table("../data/graph_a1yw.txt", header = FALSE, as.is = c("V1","V2","W"))
View(model1)
model1 = read.table("../data/graph_a1yw.txt", header = FALSE)
View(model1)
model1 = read.table("../data/graph_a1yw.txt", header = FALSE)
columns(model1) = c('edges','vertices','weight')
model1 = read.table("../data/graph_a1yw.txt", header = FALSE)
model1_graph %>% select(V1,V2)
model1 = read.table("../data/graph_a1yw.txt", header = FALSE)
model1_graph <- model1 %>% select(V1,V2)
library(igraph)
library(ggplot2)
library(dplyr)
library(igraph)
library(ggplot2)
library(dplyr)
model1 = read.table("../data/graph_a1yw.txt", header = FALSE)
model1_graph <- model1 %>% select(V1,V2)
View(model1_graph)
model1 = read.table("../data/graph_a1yw.txt", header = FALSE)
model1_s <- model1 %>% select(V1,V2)
model1_graph <- graph.data.frame(model1_s, directed = FALSE)
model1 = read.table("../data/graph_a1yw.txt", header = FALSE)
model1_s <- model1 %>% select(V1,V2)
G <- graph.data.frame(model1_s, directed = FALSE)
G$V
model1 = read.table("../data/graph_a1yw.txt", header = FALSE)
model1_s <- model1 %>% select(V1,V2)
G <- graph.data.frame(model1_s, directed = FALSE)
G.vcount()
model1 = read.table("../data/graph_a1yw.txt", header = FALSE)
model1_s <- model1 %>% select(V1,V2)
G <- graph.data.frame(model1_s, directed = FALSE)
V(G)
E(G)
model1 = read.table("../data/graph_a28o.txt", header = FALSE)
model1_s <- model1 %>% select(V1,V2)
G <- graph.data.frame(model1_s, directed = FALSE)
V(G)
E(G)
model1 = read.table("../data/graph_a2dn.txt", header = FALSE)
model1_s <- model1 %>% select(V1,V2)
G <- graph.data.frame(model1_s, directed = FALSE)
V(G)
E(G)
n <- 30000
BA_model <- sample_pa(n, power = 1, m = NULL, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = TRUE,
algorithm = c("psumtree", "psumtree-multiple", "bag"),
start.graph = NULL)
#write_graph(BA_model, "./bamodel1.txt", format = c("edgelist"))
write( degree(BA_model) , file = "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel20k.txt", ncolumns = 1 )
View(BA_model)
n <- 30000
BA_model <- sample_pa(n, power = 1, m = NULL, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = TRUE,
algorithm = c("psumtree", "psumtree-multiple", "bag"),
start.graph = NULL)
#write_graph(BA_model, "./bamodel1.txt", format = c("edgelist"))
write( degree(BA_model) , file = "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format= c("edgelist") )
n <- 30000
BA_model <- sample_pa(n, power = 1, m = NULL, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = TRUE,
algorithm = c("psumtree", "psumtree-multiple", "bag"),
start.graph = NULL)
write_graph(BA_model, "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format = c("edgelist"))
#write( degree(BA_model) , file = "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format= c("edgelist") )
n <- 30000
BA_model <- sample_pa(n, power = 1, m = NULL, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = TRUE,
algorithm = c("psumtree", "psumtree-multiple", "bag"),
start.graph = NULL)
write_graph(BA_model, "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format = c("edgelist"))
V(BA_model)
E(BA_model)
#write( degree(BA_model) , file = "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format= c("edgelist") )
n <- 10000
ER_model <- g <- erdos.renyi.game(n, 1/100)
write_graph(ER_model, "/Users/BleuDChan/ReposUPC/spectralgraph/data/graph_ermodel10k.txt", format = c("edgelist"))
V(ER_model)
E(ER_model)
#write( degree(BA_model) , file = "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format= c("edgelist") )
n <- 10000
ER_model <- g <- erdos.renyi.game(n, 1/n)
write_graph(ER_model, "/Users/BleuDChan/ReposUPC/spectralgraph/data/graph_ermodel10k.txt", format = c("edgelist"))
V(ER_model)
E(ER_model)
#write( degree(BA_model) , file = "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format= c("edgelist") )
n <- 10000
ER_model <- g <- erdos.renyi.game(n, 0.01)
write_graph(ER_model, "/Users/BleuDChan/ReposUPC/spectralgraph/data/graph_ermodel10k.txt", format = c("edgelist"))
V(ER_model)
E(ER_model)
#write( degree(BA_model) , file = "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format= c("edgelist") )
n <- 30000
ER_model <- g <- erdos.renyi.game(n, 0.001)
write_graph(ER_model, "/Users/BleuDChan/ReposUPC/spectralgraph/data/graph_ermodel10k.txt", format = c("edgelist"))
V(ER_model)
E(ER_model)
#write( degree(BA_model) , file = "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format= c("edgelist") )
n <- 30000
ER_model <- g <- erdos.renyi.game(n, 0.001)
write_graph(ER_model, "/Users/BleuDChan/ReposUPC/spectralgraph/data/graph_ermodel30k.txt", format = c("edgelist"))
V(ER_model)
E(ER_model)
#write( degree(BA_model) , file = "/Users/BleuDChan/ReposUPC/spectralgraph/data/bamodel30k.txt", format= c("edgelist") )
